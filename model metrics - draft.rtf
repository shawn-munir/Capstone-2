{\rtf1\ansi\ansicpg1252\cocoartf2707
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;\red0\green0\blue0;\red19\green118\blue70;
\red19\green118\blue70;\red144\green0\blue17;\red19\green118\blue70;}
{\*\expandedcolortbl;;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;\cssrgb\c3449\c52568\c34421;
\cssrgb\c3469\c52563\c34443;\cssrgb\c63848\c8027\c7788;\cssrgb\c3469\c52563\c34443;}
\margl1440\margr1440\vieww15620\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\qc\partightenfactor0

\f0\fs24 \cf0 \cb2 \expnd0\expndtw0\kerning0
########################\cb2 \outl0\strokewidth0 \strokec3 \
\pard\pardeftab720\qc\partightenfactor0
\cf0 ### model parameters ###\
\pard\pardeftab720\qc\partightenfactor0
\cf0 \cb2 \outl0\strokewidth0 ########################\cb2 \outl0\strokewidth0 \strokec3 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0
\cf0 #CV2 Image Resizer\
\
\pard\pardeftab720\partightenfactor0
\cf0 cv2.resize(\
		dsize = (\cf4 \cb2 \strokec4 32\cf0 \cb2 \strokec3 ,\cf4 \cb2 \strokec4 32\cf0 \cb2 \strokec3 ),\
		interpolation=cv2.INTER_CUBIC)\
\
\
#Cropping Image\
\
img[y=2:h=30, x=2:w=30]\
#i.e. this is cropping out 2 pixels from each side, keeping the middle 28x28 pixels out of 32x32\
\
\
#Blending With A Second Image\
\
\pard\pardeftab720\ri-2160\partightenfactor0
\cf0 cv2.addWeighted(\
			data1=img,\
			alpha=1.5,\
			data2=np.zeros(img.shape, img.dtype),\
			beta=.5,\
			gamma=\cf4 \cb2 \strokec4 0\cf0 \cb2 \strokec3 )\
\pard\pardeftab720\partightenfactor0
\cf0 \
\
#Inverting Colors\
cv2.bitwise_not(img)\
\
\
#Converting To Grayscale\
img/\cf4 \cb2 \strokec4 255\cf0 \cb2 \strokec3    \
\pard\pardeftab720\ri-2160\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\ri-2160\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 #Sequential() Neural Network Classifier Model\
model = Sequential()\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
#Convolution Layer\
\
model.add(Conv2D(\
\pard\pardeftab720\partightenfactor0
\cf0 			  filters=\cf5 \cb2 \strokec5 32\cf0 \cb2 \strokec3 ,\
			  kernel_size=(\cf5 \cb2 \strokec5 3\cf0 \cb2 \strokec3 , \cf5 \cb2 \strokec5 3\cf0 \cb2 \strokec3 ),\
			  padding = \cf6 \cb2 \strokec6 'same'\cf0 \cb2 \strokec3 ,\
			  activation = \cf6 \cb2 \strokec6 'relu'\cf0 \cb2 \strokec3 ,\
			  kernel_initializer=\cf6 \cb2 \strokec6 'he_uniform'\cf0 \cb2 \strokec3 ,\
			  input_shape=(\cf5 \cb2 \strokec5 28\cf0 \cb2 \strokec3 , \cf5 \cb2 \strokec5 28\cf0 \cb2 \strokec3 , \cf5 \cb2 \strokec5 3\cf0 \cb2 \strokec3 )))\
\pard\pardeftab720\partightenfactor0
\cf0 \
\
#Input Window Size For Taking Maximum Value In Downsampling\
\
model.add(MaxPooling2D((\cf5 \cb2 \strokec5 2\cf0 \cb2 \strokec3 , \cf5 \cb2 \strokec5 2\cf0 \cb2 \strokec3 )))\
\
\
#Flatten The Image\
\
model.add(Flatten()) #no params specified\
\
\
#Densely-Connected Neural Network Layers\
\
model.add(Dense(\
			 units=\cf5 \cb2 \strokec5 128\cf0 \cb2 \strokec3 ,\
			 activation=\cf6 \cb2 \strokec6 'relu'\cf0 \cb2 \strokec3 ,\
			 kernel_initializer=\cf6 \cb2 \strokec6 'he_uniform'\cf0 \cb2 \strokec3 ))\
\
model.add(Dense(\
			 units=\cf5 \cb2 \strokec5 1\cf0 \cb2 \strokec3 ,\
			 activation=\cf6 \cb2 \strokec6 'sigmoid'\cf0 \cb2 \strokec3 ))\
\
\
#Compile Model\
model.compile(\
		    optimizer=\cb2 \outl0\strokewidth0 SGD(lr=\cf7 .001\cf0 , momentum=\cf7 .9\cf0 )\cb2 \outl0\strokewidth0 \strokec3 ,\
		    loss=\cf6 \cb2 \strokec6 'binary_crossentropy'\cf0 \cb2 \strokec3 ,\
		    metrics=\cf6 \cb2 \strokec6 'accuracy'\cf0 \cb2 \strokec3 )\
\
\
#Model Fit\
\pard\pardeftab720\partightenfactor0
\cf0 model.fit(epochs = \cf5 \cb2 \strokec5 15\cf0 \cb2 \strokec3 )\
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
#Decision Line for considering something a flip opportunity ("1" label): .5 #i.e. if predicted probability of it being a flip opportunity is >= .5 (standard rounding), consider it a flip opportunity\
\
}